// Mocks generated by Mockito 5.4.4 from annotations
// in tail_app/test/Frontend/utils_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:platform/src/interface/local_platform.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUri_0 extends _i1.SmartFake implements Uri {
  _FakeUri_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalPlatform extends _i1.Mock implements _i2.LocalPlatform {
  @override
  int get numberOfProcessors => (super.noSuchMethod(
        Invocation.getter(#numberOfProcessors),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String get pathSeparator => (super.noSuchMethod(
        Invocation.getter(#pathSeparator),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#pathSeparator),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#pathSeparator),
        ),
      ) as String);

  @override
  String get operatingSystem => (super.noSuchMethod(
        Invocation.getter(#operatingSystem),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#operatingSystem),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#operatingSystem),
        ),
      ) as String);

  @override
  String get operatingSystemVersion => (super.noSuchMethod(
        Invocation.getter(#operatingSystemVersion),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#operatingSystemVersion),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#operatingSystemVersion),
        ),
      ) as String);

  @override
  String get localHostname => (super.noSuchMethod(
        Invocation.getter(#localHostname),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#localHostname),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#localHostname),
        ),
      ) as String);

  @override
  Map<String, String> get environment => (super.noSuchMethod(
        Invocation.getter(#environment),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  String get executable => (super.noSuchMethod(
        Invocation.getter(#executable),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#executable),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#executable),
        ),
      ) as String);

  @override
  String get resolvedExecutable => (super.noSuchMethod(
        Invocation.getter(#resolvedExecutable),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#resolvedExecutable),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#resolvedExecutable),
        ),
      ) as String);

  @override
  Uri get script => (super.noSuchMethod(
        Invocation.getter(#script),
        returnValue: _FakeUri_0(
          this,
          Invocation.getter(#script),
        ),
        returnValueForMissingStub: _FakeUri_0(
          this,
          Invocation.getter(#script),
        ),
      ) as Uri);

  @override
  List<String> get executableArguments => (super.noSuchMethod(
        Invocation.getter(#executableArguments),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  String get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#version),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#version),
        ),
      ) as String);

  @override
  bool get stdinSupportsAnsi => (super.noSuchMethod(
        Invocation.getter(#stdinSupportsAnsi),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get stdoutSupportsAnsi => (super.noSuchMethod(
        Invocation.getter(#stdoutSupportsAnsi),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get localeName => (super.noSuchMethod(
        Invocation.getter(#localeName),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#localeName),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#localeName),
        ),
      ) as String);

  @override
  bool get isLinux => (super.noSuchMethod(
        Invocation.getter(#isLinux),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isMacOS => (super.noSuchMethod(
        Invocation.getter(#isMacOS),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isWindows => (super.noSuchMethod(
        Invocation.getter(#isWindows),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isAndroid => (super.noSuchMethod(
        Invocation.getter(#isAndroid),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isIOS => (super.noSuchMethod(
        Invocation.getter(#isIOS),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isFuchsia => (super.noSuchMethod(
        Invocation.getter(#isFuchsia),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #toJson,
            [],
          ),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #toJson,
            [],
          ),
        ),
      ) as String);
}
